package com.yf.psp.db.postgres.rbac;


 

/**
 * Model class of tbl_rbac_privilege.
 * 
 * @author generated by ERMaster
 * @version $Id$
 */
public class RbacPrivilege  {

	private static class OperationBit{
		/* 
		xxxxx :bit map 
		从左往右
		第1位： 读
		第2位： 写
		第3位： 新建
		第4位    删除
		*/

		public static final String CAN_NOT = "0";
		public static final String CAN = "1";
		
		public static final Integer READ = 1;
		public static final Integer  WRITE  = 2;
		public static final Integer  INSERT  = 3;
		public static final Integer  DELETE  = 4;
		
		public static final Integer  MAX  = DELETE;
		
	}

	/** privilege_id. */
	private Integer privilegeId;
	
	private Integer resId;

	/** operation. */
	private String operation;
	
	private String roleName;

	/** 资源定义表. */
	private RbacResource rbacResource;
 
	private Short deleteFlag; 
	
	public static RbacPrivilege getRbacPrivilege(final RbacRole role,final RbacResource res) {
		RbacPrivilege pri = role.getResIdPrivileges().get(res.getResId());
		if (pri != null) {
			return pri;
		}
		RbacResource resParent = res.getParentRes();
		while (resParent != null) {
			pri = role.getResIdPrivileges().get(resParent.getResId());
			if (pri != null) {
				return pri;
			}
			resParent = resParent.getParentRes();
		}
		return null;
	}
	
	public boolean canRead() {
		if(this.operation.length()<=OperationBit.READ) {
			return false;
		}
		return OperationBit.CAN.equals(this.operation.substring(OperationBit.READ - 1, OperationBit.READ));
	}
	
	public boolean canWrite() {
		if(this.operation.length()<=OperationBit.WRITE) {
			return false;
		}
		return OperationBit.CAN.equals(this.operation.substring(OperationBit.WRITE - 1, OperationBit.WRITE));
	}
	
	public boolean canInsert() {
		if(this.operation.length()<=OperationBit.INSERT) {
			return false;
		}
		return OperationBit.CAN.equals(this.operation.substring(OperationBit.INSERT - 1, OperationBit.INSERT));
	}
	
	public boolean canDelete() {
		if(this.operation.length()<=OperationBit.DELETE) {
			return false;
		}
		return OperationBit.CAN.equals(this.operation.substring(OperationBit.DELETE - 1, OperationBit.DELETE));
	}
	
	public boolean canAccess() {
		return this.operation.length()<=OperationBit.MAX && this.operation.indexOf(OperationBit.CAN) != -1;
	}

	public Short getDeleteFlag() {
		return deleteFlag;
	}

	public void setDeleteFlag(Short deleteFlag) {
		this.deleteFlag = deleteFlag;
	}

	  
	 
 

	public String getRoleName() {
		return roleName;
	}

	public void setRoleName(String roleName) {
		this.roleName = roleName;
	}

	/**
	 * Set the privilege_id.
	 * 
	 * @param privilegeId
	 *            privilege_id
	 */
	public void setPrivilegeId(Integer privilegeId) {
		this.privilegeId = privilegeId;
	}

	/**
	 * Get the privilege_id.
	 * 
	 * @return privilege_id
	 */
	public Integer getPrivilegeId() {
		return this.privilegeId;
	}

	/**
	 * Set the operation.
	 * 
	 * @param operation
	 *            operation
	 */
	public void setOperation(String operation) {
		this.operation = operation;
	}

	/**
	 * Get the operation.
	 * 
	 * @return operation
	 */
	public String getOperation() {
		return this.operation;
	}

	 

	public Integer getResId() {
		return resId;
	}

	public void setResId(Integer resId) {
		this.resId = resId;
	}

	public RbacResource getRbacResource() {
		return rbacResource;
	}

	public void setRbacResource(RbacResource rbacResource) {
		this.rbacResource = rbacResource;
	}

	

}
